import React from "react";
import axios from "axios"; //импорт всего из axios, как объект с названием axios в новой версии без * as
import userPhoto from "../../assets/images/user.png"; //импорт картинки

// делаем из компоненты юзерз-классовый объект
// теперь реакт не будет постоянно создавать новый объект при изменении чего либо конкретно в этой компоненте.
// при смене роута, ререндерится все и объект тоже
// !!!больше нет сайдэффекта

class Users extends React.Component {

  //стандартный конструктор, в котором сидит метод супер из родительской реактовой компоненты
  //!!!если в нем только метод супер, то можно не писать.
  // constructor(props) {
  //   super(props);
  // axios.get("https://social-network.samuraijs.com/api/1.0/users")
  //  .then((response) => {this.props.setUsers(response.data.items)})
  // тут без  if ибо объект создается один раз при перехое на /users а далее просто перерисовывается jsx


componentDidMount(){ // сообщаем что компонента уже вмонтирована. более не нужно делать запросы на сервер
  axios.get("https://social-network.samuraijs.com/api/1.0/users")
     .then((response) => {this.props.setUsers(response.data.items)})
}
  // getUsers = () => {
  //   if (this.props.users.length === 0) {
  //      будем получать юзеров по клику кнопки
  //     axios
  //       .get("https://social-network.samuraijs.com/api/1.0/users")
  //       .then((response) => {
  //         this.props.setUsers(response.data.items);
  //       }); //по дебагу ищем

  //     бывают запросы типа get post put delete. По ссылке можно увидеть json файл.
  //     после реквеста на сервер, респонз приходит не сразу
  //      json файл-объект в котором ключи в ковычках
  //   }
  // };

  render() {  
    // ибо реакт делает так let m1=new Users
    // let jsx= m1.render

    return (
      <div>
        {this.props.users.map((u) => (
          <div>
            <span>
              <div>
                <img
                  src={u.photos.small != null ? u.photos.small : userPhoto}
                />
              </div>

              <div>
                {u.followed ? (
                  <button
                    onClick={() => {
                      this.props.unFollow(u.id);
                    }}
                  >
                    Unfollow
                  </button>
                ) : (
                  <button
                    onClick={() => {
                      this.props.follow(u.id);
                    }}
                  >
                    Follow
                  </button>
                )}
              </div>
            </span>

            <span>
              <span>
                <div>{u.name}</div>
                {/* меняем фулнейм на нейм как в апи */}
                <div>{u.status}</div>
              </span>

              <span>
                <div>{"u.location.country"}</div>
                {/* так как в апи нет ключа локейшн */}
                <div>{"u.location.city"}</div>
              </span>
            </span>
          </div>
        ))}
      </div>
    );
  }
}
export default Users;
